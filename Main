-- toggles
getgenv().questToggle = false
getgenv().eatToggle = false
getgenv().buyToggle = false
getgenv().equipToggle= false
getgenv().gloveToggle = false
getgenv().gangToggle = false
getgenv().clickToggle = false
getgenv().PBToggle = false
-- variables
local plr = game:GetService("Players").LocalPlayer
local runService = game:GetService("RunService")
local VIM = game:GetService("VirtualInputManager")
local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()
local minStam
local foodName
local covType,toolType
local bagNum
local connections = { -- equip needs work
    duraConnect = nil,
    questConnect = nil,
    eatConnect = nil,
    buyConnect = nil,
    gloveConect =nil,
    gangConnect = nil,
    clickConnect = nil,
    PBConnect = nil
}
function autoQuest()
    local deliv = workspace.Quests.QuestLocations.Delivery
    local cat = workspace.Quests.QuestLocations.Cat
    local briefcase = workspace.Quests.QuestLocations.Briefcase
    local char = plr.Character or plr.CharacterAdded:Wait()
    local quest = char:FindFirstChild("Quest")
    if quest ~= nil then
        if quest.PlayerQuest.Value == "Cat" or quest.PlayerQuest.Value == "Briefcase" or quest.PlayerQuest.Value == "Delivery" then
            local loc =  quest.Location.Value
            if quest.PlayerQuest.Value == "Briefcase" then
                local case = briefcase:FindFirstChild(tostring(loc)).Case
                local cd = briefcase:FindFirstChild(tostring(loc)).ClickDetector
                repeat 
                    char.HumanoidRootPart.CFrame = case.CFrame 
                    fireclickdetector(cd,32)
                    wait()
                until char:FindFirstChild("Quest") == nil or quest.Objective.Value
            else
                if quest.PlayerQuest.Value == "Cat" then
                    local place = cat[tostring(loc)]
                    local cd = place.ClickDetector
                    repeat 
                        char.HumanoidRootPart.CFrame = place.CFrame 
                        fireclickdetector(cd,32)
                        wait()
                    until char:FindFirstChild("Quest") == nil or quest.Objective.Value
                else
                    local place = deliv[tostring(loc)]
                    repeat 
                        char.HumanoidRootPart.CFrame = place.CFrame + place.CFrame.UpVector * -2
                        firetouchinterest(char.HumanoidRootPart,place,0)
                        firetouchinterest(char.HumanoidRootPart,place,1)
                        wait()
                    until char:FindFirstChild("Quest") == nil or quest.Objective.Value
                end
            end
        else
            quest:Destroy()
        end
    else
        local args = {
            [1] = "Quest"
        }
        game:GetService("ReplicatedStorage").RemoteEvent:FireServer(unpack(args))
        char.ChildAdded:Wait()
    end
end
function autoDura()
    for i,v in pairs(workspace.TrainingStations:GetChildren()) do 
        fireclickdetector(v.ClickDetector,5)
    end
end

function autoEat()
    if not eatToggle then return end
    for i,v in pairs(plr.Backpack:GetChildren()) do
        if v:IsA("Tool") and v.Name == foodName then 
            local char = plr.Character
            char.Humanoid:EquipTool(v)
            char:FindFirstChild(v.Name):Activate()
            break;
        end
    end
    if foodName == "Chicken" or (string.find(foodName,"Shake"))then
        wait(32)
    else
        wait(600)
    end
end
function autoBuyFood()
    if not buyToggle then return end
    for i,v in pairs(workspace.Items:GetDescendants()) do
        if string.find(v.Name, foodName) then 
            fireclickdetector(v.Parent.ClickDetector,12)
        end
    end
end
function autoGloves() -- needs work
    if not gloveToggle then return end
    local char = plr.Character
    if plr.Backpack:FindFirstChild("Gloves") then -- tp to bags (also change if statement) char:FindFirstChild("LeftGloves")
        char.HumanoidRootPart.CFrame = workspace["Punching Bags"]:GetChildren()[bagNum].HumanoidRootPart.CFrame + workspace["Punching Bags"]:GetChildren()[bagNum].HumanoidRootPart.CFrame.LookVector * -6
    else -- buy gloves
        wait()
    end
end
local function supportEquip(tool)
    for i,v in pairs(plr.Backpack:GetChildren()) do
        if string.find(v.Name,tool) then
            return v
        end
    end
    return nil
end
function autoEquip() -- check
    if not equipToggle then return end
    local char = plr.Character
    local yes
    yes = supportEquip(toolType)
    if yes then
        char:WaitForChild("Humanoid"):EquipTool(yes)
    end
end
function autoGang() -- work on
    if not gangToggle then return end
    local vault = workspace.GangArea.Vault
    local char = plr.Character
    if char:FindFirstChild("Combat") and workspace.CurrentCamera.Focus == CFrame.new(-2475.2019, -20.3218689, 1438.65527, 1, 0, 0, 0, 1, 0, 0, 0, 1) then 
        print("stuck2")
        char:FindFirstChild("Combat"):Activate()
    else print("stuck3") char.Humanoid:EquipTool(plr.Backpack:FindFirstChild("Combat")) end 
    print("stuck")
    char.HumanoidRootPart.CFrame = vault.CFrame + vault.CFrame.LookVector * -5
end
function autoPB() -- work obviously
    return
end
function autoClick()
    if not clickToggle then return end
    if  plr.Stamina.Value <= minStam then
        repeat wait() until plr.Stamina.Value >= tonumber(string.split(plr.PlayerGui.MainGui.StatusFrame.Stamina.stat.Text,"/")[2])
    else
        VIM:SendMouseButtonEvent(900, 400, 0, true, game, 1)
        VIM:SendMouseButtonEvent(900, 400, 0, false, game, 1)
    end
end
function findFunc(name)
    for i,v in pairs(getfenv()) do
        if type(v) == "function" then print(debug.getinfo(v).name) end
    end
end
function connectHandler(name,bool)
    if bool then
        connections[name] = runService.Heartbeat:Connect(autoDura)
    else
        if connections[name] ~= nil then
            connections[name]:Disconnect()
        end
    end
end
local Window = OrionLib:MakeWindow({Name = "Tatakai V DOGSHIT", HidePremium = true})
local Tab = Window:MakeTab({
	Name = "Farms",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})
Tab:AddToggle({
	Name = "Coventional Grind",
	Default = false,
	Callback = function(Value)
        if covType == "Pullups" then
            connectHandler("dura")
        else
            if covType == "Gloves" then
                gloveToggle = Value
            else
                if covType == "Money" then
                    questToggle = Value
                else
                    gangToggle = Value
                end
            end
        end
    end
})
Tab:AddDropdown({
	Name = "Type",
	Default = "Pullups",
	Options = {"Pullups","Gloves", "Money","Gangbase",},
	Callback = function(Value)
		covType = Value
	end    
})
Tab:AddDropdown({
	Name = "Bag Select (ignore if not doing bags)",
	Default = 1,
	Options = {1,2,3,4,5,6},
	Callback = function(Value)
		bagNum = Value
	end    
})
Tab:AddToggle({
	Name = "Tool Grind",
	Default = false,
	Callback = function(Value)
		equipToggle = Value
    end
})
Tab:AddDropdown({
	Name = "Tool",
	Default = "Squat",
	Options = {"Squat","Situp", "Pushup","Meditate","Jumping Rope","20 KG Dumbbell","50 KG Dumbbell","100 KG Dumbbell","200 KG Dumbbell"}, -- work on meditate
	Callback = function(Value)
		toolType = Value
	end    
})
local Tab3 = Window:MakeTab({
	Name = "Misc",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})
Tab3:AddSlider({
	Name = "Minimum Stamina",
	Min = 0,
	Max = 1000,
	Default = 50,
	Color = Color3.fromRGB(0, 247, 255),
	Increment = 1,
	ValueName = "",
	Callback = function(Value)
		minStam = Value
	end    
})

Tab3:AddToggle({
	Name = "Auto Eat",
	Default = false,
	Callback = function(Value)
	    eatToggle = Value
    end
})
Tab3:AddToggle({
    Name = "Auto Buy",
    Default = false,
    Callback = function(Value)
        buyToggle = Value
    end
})
Tab3:AddDropdown({
	Name = "Food to auto eat/buy",
	Default = "Chicken",
	Options = {"Chicken","Burger", "Chocolate Shake","Mango Shake","Strawberry Shake","Ramen"}, -- work on meditate
	Callback = function(Value)
		foodName = Value
	end    
})
Tab3:AddBind({
	Name = "Auto Click",
	Default = Enum.KeyCode.T,
	Hold = false,
	Callback = function()
		clickToggle = not clickToggle
	end    
})
--[[
plr.CharacterAdded:Connect(function(char)
    wait(6)
    spawn(function()
        autoQuest()
    end)
end)
--]]

OrionLib:Init()
findFunc("yes")
